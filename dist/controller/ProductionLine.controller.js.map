{"version":3,"file":"ProductionLine.controller.js","names":["BaseController","formatter","Factory","Game","Product","treeGood","constructor","good","path","control","factoryOptions","parent","Name","Dangerous","Illegal","AvgPrice","Level","Customers","Manufacturer","getActiveFactory","factory","active","treeFactory","requiredProducts","ProductionCap","Cost","Products","Materials","selectid","replace","getMaterialLevelCombined","game","result","product","getProduct","ProductionLine","onInit","Model","JSONModel","setData","TargetFactory","products","mainFactory","deathZone","tree","ownedFactories","requiredFactories","getView","setModel","getRouter","getRoute","attachPatternMatched","onPatternMatched","inputF","byId","setFilterFunction","sTerm","oItem","getText","match","RegExp","generateProductionLine","event","that","view","getModel","getProperty","Panelcount","currentPath","viewModel","deathArray","destroy","TargerFactoryName","getValue","getFactory","setProperty","TargetFactoryGoods","getProductsFromFactory","getFactoryMaterialPanels","materialarray","getMaterialsForFactory","material","push","getFactoryOrSelectWithPanel","addContent","isParentActive","id","Panel","expanded","expandable","headerText","factories","getFactoriesForProduct","error","console","warn","length","Title","text","indexOf","select","Select","selectedItem","items","template","Item","key","templateShareable","change","selectFactory","button","Button","press","setBaseFactory","addStyleClass","easiestfactory","compare","setSelectedKey","width","visible","substring","lastIndexOf","productionGoods","finalTree","treeitem","vboxItem","addItem","sort","getSource","item","getParameters","getBindingPath","i","getFlat","supliment","supplements","supplement","Material","newFactory","getContent","getSelectedItem","setFactory","basePath","onDropHave","oDragged","getParameter","List","getParent","iDragPosition","indexOfItem","aItems","resultItems","splice"],"sources":["../../src/controller/ProductionLine.controller.ts"],"sourcesContent":["import MessageBox from \"sap/m/MessageBox\";\r\nimport BaseController from \"./BaseController\";\r\nimport formatter from \"../model/formatter\";\r\nimport Event from \"sap/ui/base/Event\";\r\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\r\nimport Input from \"sap/m/Input\";\r\nimport SuggestionItem from \"sap/m/SuggestionItem\";\r\nimport { Factory, Game, Product } from \"./Types\";\r\nimport VBox from \"sap/m/VBox\";\r\nimport Control from \"sap/ui/core/Control\";\r\nimport Panel from \"sap/m/Panel\";\r\nimport Select from \"sap/m/Select\";\r\nimport Item from \"sap/ui/core/Item\";\r\nimport Title from \"sap/m/Title\";\r\nimport Button from \"sap/m/Button\";\r\n\r\n/**\r\n * @namespace de.henloh.prodts.controller\r\n */\r\nclass treeGood extends Product {\r\n\tfactoryOptions: treeFactory[];\r\n\tpath: string;\r\n\tcontrol: Control;\r\n\tparent: string;\r\n\tconstructor(good: Product, path: string, control: Control, factoryOptions: treeFactory[], parent?: string) {\r\n\t\tsuper(good.Name, good.Dangerous, good.Illegal, good.AvgPrice, good.Level, good.Customers, good.Manufacturer);\r\n\r\n\t\tthis.path = path;\r\n\t\tthis.control = control;\r\n\t\tthis.factoryOptions = factoryOptions;\r\n\t\tthis.parent = parent;\r\n\t}\r\n\tpublic getActiveFactory(): treeFactory {\r\n\t\tfor (const factory of this.factoryOptions) {\r\n\t\t\tif (factory.active) {\r\n\t\t\t\treturn factory;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nclass treeFactory extends Factory {\r\n\trequiredProducts: treeGood[];\r\n\tpath: string;\r\n\tselectid: string;\r\n\tcontrol: Control;\r\n\tactive: boolean;\r\n\tparent: string;\r\n\tconstructor(factory: Factory, path: string, requiredProducts: treeGood[], control: Control, active: boolean, parent?: string) {\r\n\t\tsuper(factory.Name,factory.ProductionCap,factory.Cost,factory.Products,factory.Materials);\r\n\r\n\t\tthis.selectid = factory.Name.replace(/\\s/g, '');\r\n\t\tthis.path = path;\r\n\t\tthis.requiredProducts = requiredProducts;\r\n\t\tthis.control = control;\r\n\t\tthis.active = active;\r\n\t\tthis.parent = parent;\r\n\t}\r\n\tpublic getMaterialLevelCombined(game: Game): int {\r\n\t\tvar result: int = 0;\r\n\t\tfor (const product of this.Materials) {\r\n\t\t\tresult += game.getProduct(product).Level;\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n}\r\nexport default class ProductionLine extends BaseController {\r\n\tprivate formatter = formatter;\r\n\t\r\n\tpublic onInit(): void {\r\n\t\tvar Model = new JSONModel();\r\n\t\tModel.setData({\r\n\t\t\tTargetFactory: \"\",\r\n\t\t\tproducts: [],\r\n            mainFactory: {},\r\n\t\t\tdeathZone: [],\r\n\t\t\ttree: [],\r\n\t\t\townedFactories: [],\r\n\t\t\trequiredFactories: []\r\n\t\t});\r\n\t\tthis.getView().setModel(Model, \"View\");\r\n\t\tthis.getRouter().getRoute(\"productionLine\").attachPatternMatched(this.onPatternMatched, this);\r\n\r\n\t\tvar inputF = this.byId(\"targetFactoryInput\") as Input;\r\n\t\tinputF.setFilterFunction(function (sTerm: string, oItem:SuggestionItem) {\r\n\t\t\treturn oItem.getText().match(new RegExp(\"^\"+sTerm, \"i\"));\r\n\t\t});\r\n\t}\r\n\tpublic async generateProductionLine(event: Event): Promise<void> {\r\n\t\tvar that = this;\r\n\t\tvar view = this.getView();\r\n        var game = new Game(this.getModel(\"GoodModel\").getProperty(\"/Goods\"), this.getModel(\"FactorieModel\").getProperty(\"/Factories\"));\r\n\t\t// avoid duplicate ID\r\n\t\tvar Panelcount = 0;\r\n\t\tvar currentPath = \"\";\r\n\t\tvar viewModel = this.getModel(\"View\") as JSONModel;\r\n\t\t// remove previos items \r\n\t\tvar deathArray:Control[] = viewModel.getProperty(\"/deathZone\");\r\n\t\tfor (const control of deathArray) {\r\n\t\t\tcontrol.destroy();\r\n\t\t}\r\n\t\tdeathArray = [];\r\n\t\t// list of total required factories\r\n\t\tvar requiredFactories:string[] = [];\r\n\t\tvar TargerFactoryName = (view.byId(\"targetFactoryInput\") as Input).getValue();\r\n\t\tvar TargetFactory = game.getFactory(TargerFactoryName);\r\n\t\tviewModel.setProperty(\"/mainFactory\", TargetFactory);\r\n\t\tvar TargetFactoryGoods = game.getProductsFromFactory(TargetFactory.Name);\r\n\t\tviewModel.setProperty(\"/products\", TargetFactoryGoods);\r\n\t\t\r\n\t\tvar getFactoryMaterialPanels = function(good: treeGood, currentPath: string, factory: treeFactory): treeGood {\r\n\t\t\tvar materialarray = game.getMaterialsForFactory(factory.Name);\r\n\r\n\t\t\t//console.log(materialarray);\r\n\t\t\tfor (const material of materialarray) {\r\n\t\t\t\tvar path  = currentPath + \"/\" + material.Name.replace(/\\s/g, '');\r\n\t\t\t\tfactory.requiredProducts.push( new treeGood(material, path, null, [], factory.path) );\r\n\t\t\t}\r\n\t\t\tfor (var material of factory.requiredProducts) {\r\n\t\t\t\tmaterial = getFactoryOrSelectWithPanel(material, factory.active);\r\n\t\t\t\t(factory.control as Panel).addContent(material.control);\r\n\t\t\t}\r\n\t\t\treturn good;\r\n\t\t}\r\n\t\tvar getFactoryOrSelectWithPanel = function(good: treeGood, isParentActive?: boolean): treeGood {\r\n\t\t\tcurrentPath = currentPath + \"/\" + good.Name.replace(/\\s/g, '');\r\n\t\t\t//console.log(currentPath);\r\n\t\t\t\r\n\t\t\tvar id = good.Name.replace(/\\s/g, '');\r\n\t\t\t//console.log(`{View>/tree${currentPath}/Name}`);\r\n\t\t\tgood.control = new Panel(id + Panelcount, {\r\n\t\t\t\texpanded: false,\r\n\t\t\t\texpandable: true,\r\n\t\t\t\theaderText: `{View>/tree${currentPath}/Name}`\r\n\t\t\t});\r\n\t\t\tviewModel.setProperty(\"/tree\" + currentPath, good);\r\n\t\t\tdeathArray.push(good.control);\r\n\t\t\tPanelcount++;\r\n\t\t\tvar factories = game.getFactoriesForProduct(good.Name);\r\n\t\t\t//console.log(factories);\r\n\t\t\ttry {\r\n\t\t\t\tfor (const factory of factories) {\r\n\t\t\t\t\tvar path = currentPath + \"/\" + factory.Name.replace(/\\s/g, '');\r\n\t\t\t\t\tgood.factoryOptions.push(new treeFactory(factory, path ,[], null, false));\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.warn(\"No factory for \"+ good.Name);\r\n\t\t\t\treturn good;\r\n\t\t\t}\r\n\t\t\t// für requiered factories dürfen nur die aktiven gewertet werden\r\n\t\t\tif (good.factoryOptions.length == 0) return good;\r\n\t\t\tif (factories.length == 1) {\r\n\t\t\t\tgood.factoryOptions[0].active = isParentActive;\r\n\t\t\t\tvar path = currentPath + \"/\" + good.factoryOptions[0].Name.replace(/\\s/g, '');\r\n\t\t\t\t// verhindern von endlos rekursion (Mine braucht Borher, Bohrer braucht Stahl, Stahl braucht Mine)\r\n\t\t\t\tif (good.Level == 0) {\r\n\t\t\t\t\tgood.factoryOptions[0].control = new Title(id + Panelcount, {\r\n\t\t\t\t\t\t//text: good.factoryOptions[0].Name\r\n\t\t\t\t\t\ttext: `{View>/tree${path}/Name}`\r\n\t\t\t\t\t});\r\n\t\t\t\t\t(good.control as Panel).addContent(good.factoryOptions[0].control);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tgood.factoryOptions[0].control = new Panel(id + Panelcount, {\r\n\t\t\t\t\t\texpanded: true,\r\n\t\t\t\t\t\texpandable: true,\r\n\t\t\t\t\t\theaderText: `{View>/tree${path}/Name}`\r\n\t\t\t\t\t});\r\n\t\t\t\t\t(good.control as Panel).addContent(good.factoryOptions[0].control);\r\n\t\t\t\t\tgood = getFactoryMaterialPanels(good, currentPath, good.factoryOptions[0]);\r\n\t\t\t\t}\r\n\t\t\t\tPanelcount++;\r\n\t\t\t\tdeathArray.push(good.factoryOptions[0].control);\r\n\t\t\t\tif (good.factoryOptions[0].active) {\r\n\t\t\t\t\trequiredFactories.indexOf(good.factoryOptions[0].Name) === -1 ? requiredFactories.push(good.factoryOptions[0].Name) : null;\r\n\t\t\t\t}\r\n\t\t\t\tviewModel.setProperty(`/tree${path}`, good.factoryOptions[0]);\r\n\t\t\t} else {\r\n\t\t\t\t// auswahl an möglichen Produzenten\r\n\t\t\t\t//viewModel.setProperty(`/tree${currentPath}/factoryOptions`, good.factoryOptions);\r\n\t\t\t\tvar select = new Select(id + Panelcount, {\r\n\t\t\t\t\tselectedItem: `View>/tree${currentPath}/activeChild`,\r\n\t\t\t\t\titems: {\r\n\t\t\t\t\t\tpath: `View>/tree${currentPath}/factoryOptions`,\r\n\t\t\t\t\t\ttemplate: new Item({\r\n\t\t\t\t\t\t\ttext: \"{View>Name}\",\r\n\t\t\t\t\t\t\tkey: \"{View>selectid}\"\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\ttemplateShareable: true\r\n\t\t\t\t\t},\r\n\t\t\t\t\tchange: that.selectFactory\r\n\t\t\t\t});\r\n\t\t\t\tPanelcount++;\r\n\t\t\t\tvar button = new Button(id + Panelcount, {\r\n\t\t\t\t\ttext: `Apply to all {View>/tree${currentPath}/Name} facilities.`,\r\n\t\t\t\t\tpress: that.setBaseFactory\r\n\t\t\t\t}).addStyleClass(\"sapUiSmallMarginBegin\");\r\n\t\t\t\tPanelcount++;\r\n\t\t\t\t(good.control as Panel).addContent(select);\r\n\t\t\t\t(good.control as Panel).addContent(button);\r\n\t\t\t\tdeathArray.push(select);\r\n\t\t\t\tdeathArray.push(button);\r\n\t\t\t\t// ermittle welche fabrik die \"einfachsten\" komponenten hat\r\n\t\t\t\tvar easiestfactory:string;\r\n\t\t\t\tvar compare: int = -1;\r\n\t\t\t\tfor (const factory of good.factoryOptions) {\r\n\t\t\t\t\tif (compare == -1) {\r\n\t\t\t\t\t\teasiestfactory = factory.Name;\r\n\t\t\t\t\t\tcompare = factory.getMaterialLevelCombined(game);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (factory.getMaterialLevelCombined(game) < compare) {\r\n\t\t\t\t\t\teasiestfactory = factory.Name;\r\n\t\t\t\t\t\tcompare = factory.getMaterialLevelCombined(game);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tselect.setSelectedKey(easiestfactory.replace(/\\s/g, ''));\r\n\r\n\t\t\t\tfor (var factory of good.factoryOptions) {\r\n\t\t\t\t\tid = good.Name.replace(/\\s/g, '') + factory.Name.replace(/\\s/g, '');\r\n\t\t\t\t\tvar path = currentPath + \"/\" + factory.Name.replace(/\\s/g, '');\r\n\r\n\t\t\t\t\tif (good.Level == 0) {\r\n\t\t\t\t\t\tfactory.control = new Title(id + Panelcount, {\r\n\t\t\t\t\t\t\ttext: `{View>/tree${path}/Name}`,\r\n\t\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t\t\tvisible: `{View>/tree${path}/active}`\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdeathArray.push(factory.control);\r\n\t\t\t\t\t\tPanelcount++;\r\n\t\t\t\t\t\t(good.control as Panel).addContent(factory.control);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfactory.control = new Panel(id + Panelcount, {\r\n\t\t\t\t\t\t\texpanded: true,\r\n\t\t\t\t\t\t\theaderText: `{View>/tree${path}/Name}`,\r\n\t\t\t\t\t\t\texpandable: true,\r\n\t\t\t\t\t\t\tvisible: `{View>/tree${path}/active}`\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdeathArray.push(factory.control);\r\n\t\t\t\t\t\tPanelcount++;\r\n\t\t\t\t\t\t(good.control as Panel).addContent(factory.control);\r\n\t\t\t\t\t\tgood = getFactoryMaterialPanels(good, currentPath, factory);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfactory.parent = currentPath;\r\n\t\t\t\t\tif (isParentActive) {\r\n\t\t\t\t\t\tfactory.active = (factory.Name == easiestfactory)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfactory.active = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tviewModel.setProperty(\"/tree\"+path, factory);\r\n\t\t\t\t\tif (factory.active) {\r\n\t\t\t\t\t\trequiredFactories.indexOf(factory.Name) === -1 ? requiredFactories.push(factory.Name) : null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcurrentPath = currentPath.substring(0, currentPath.lastIndexOf(\"/\"));\r\n\t\t\treturn good\r\n\t\t}\r\n\t\tvar productionGoods = game.getMaterialsForFactory(TargetFactory.Name);\r\n\t\tvar finalTree:treeGood[] = [];\r\n\t\tfor (const good of productionGoods) {\r\n\t\t\tfinalTree.push(new treeGood(good, \"/\" + good.Name.replace(/\\s/g, ''), null, []));\r\n\t\t}\r\n\t\tfor (var treeitem of finalTree) {\r\n\t\t\ttreeitem = getFactoryOrSelectWithPanel(treeitem, true);\r\n\t\t\t// var panel = getPanelWithSelect(good.Name)\r\n\t\t\t// var treeitem = new treeGood(good, panel, await buildTree(good, panel))\r\n\t\t\t// panel.setModel(new JSONModel(treeitem.factoryOptions), \"Binding\")\r\n\t\t\t// ProductionTree.push(treeitem)\r\n\t\t}\r\n\t\tfor (const vboxItem of finalTree) {\r\n\t\t\t(that.byId(\"DetailedProdList\") as VBox).addItem(vboxItem.control);\r\n\t\t}\r\n\t\t//console.log(finalTree);\r\n\t\tviewModel.setProperty(\"/prodTree\", finalTree);\r\n\t\t//console.log(viewModel.getProperty(\"/tree\"));\r\n\t\t\r\n\t\tviewModel.setProperty(\"/deathZone\", deathArray);\r\n\t\tviewModel.setProperty(\"/requiredFactories\", requiredFactories.sort());\r\n\t}\r\n\tpublic selectFactory(event: Event): void {\r\n\t\tvar select = event.getSource() as Select;\r\n\t\tvar item = event.getParameters().selectedItem;\r\n\t\tvar viewModel = this.getModel(\"View\") as JSONModel;\r\n\t\t//console.log(((event.getSource() as Select).getParent() as Panel).getContent());\r\n\t\tvar path = select.getBindingPath(\"items\");\r\n\t\tvar factoryOptions = viewModel.getProperty(path);\r\n\t\tfor (var i = 0; i < factoryOptions.length; i++) {\r\n\t\t\tviewModel.setProperty(path+`/${i}/active`, false);\r\n\r\n\t\t\tif (viewModel.getProperty(path+`/${i}/Name`) == item.getText()) {\r\n\t\t\t\tviewModel.setProperty(path+`/${i}/active`, true);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Liste an Aktiven anpassen\r\n\t\tvar requiredFactories: string[] = [];\r\n\t\tvar getFlat = function(material: treeGood) {\r\n\t\t\ttry {\r\n\t\t\t\tvar factory = material.getActiveFactory();\r\n\t\t\t\trequiredFactories.indexOf(factory.Name) === -1 ? requiredFactories.push(factory.Name) : null;\r\n\t\t\t\tfor(const supliment of factory.requiredProducts) {\r\n\t\t\t\t\tgetFlat(supliment);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.warn(\"No factory\")\r\n\t\t\t\t// console.warn(error)\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar supplements = (viewModel.getProperty(\"/mainFactory\") as Factory).Materials;\r\n\t\tfor (const supplement of supplements) {\r\n\t\t\tgetFlat(viewModel.getProperty(\"/tree/\"+ supplement.replace(/\\s/g, '')));\r\n\t\t}\r\n\t\t//console.log(viewModel.getProperty(\"/prodTree\"));\r\n\t\t//console.log(requiredFactories);\r\n\t\t\r\n\t\tviewModel.setProperty(\"/requiredFactories\", requiredFactories.sort());\r\n\t}\r\n\tpublic setBaseFactory(event: Event): void {\r\n\t\tvar viewModel = this.getModel(\"View\") as JSONModel;\r\n\t\t// loop base products!\r\n\t\t// get into details\r\n\t\t// till infinity - also halt so viele ebenen dies gibt. \r\n\t\t// select setzten und richtige factory visible machen\r\n\t\t// vorher rausfinden welche Fabrik geändert wurde!\r\n\t\t// und ich brauch noch die neue factory!\r\n\t\tvar button = event.getSource() as Button;\r\n\t\tvar path = button.getBindingPath(\"text\");\r\n\t\tvar Material = viewModel.getProperty(path);\r\n\t\t// erstes control ist immer das select da es den button nur bei Produkten gibt die mehrere hersteller haben\r\n\t\tvar newFactory = viewModel.getProperty(path.substring(0, path.lastIndexOf(\"/\")));\r\n\t\tnewFactory = ((newFactory.control.getContent()[0] as Select).getSelectedItem() as Item).getText();\r\n\t\t\r\n\t\tvar supplements = (viewModel.getProperty(\"/mainFactory\") as Factory).Materials;\r\n\t\tvar setFactory = function(supplement: treeGood) {\r\n\t\t\tif (supplement.Name == Material) {\r\n\t\t\t\tvar select = (supplement.control as Panel).getContent()[0] as Select;\r\n\t\t\t\tselect.setSelectedKey(newFactory.replace(/\\s/g, ''));\r\n\t\t\t\tvar basePath = \"/tree\" + supplement.path + \"/factoryOptions/\";\r\n\t\t\t\tfor (let i = 0; i < supplement.factoryOptions.length; i++) {\r\n\t\t\t\t\tviewModel.setProperty(basePath + i + \"/active\", false);\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tfor (let i = 0; i < supplement.factoryOptions.length; i++) {\r\n\t\t\t\t\tif (newFactory == viewModel.getProperty(basePath + i + \"/Name\")) {\r\n\t\t\t\t\t\tviewModel.setProperty(basePath + i + \"/active\", true);\r\n\t\t\t\t\t\tbreak;\t\t\t\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\t//viewModel.setProperty(\"/tree\" + supplement.path + \"/\" + newFactory.replace(/\\s/g, '') + \"/active\", true)\t\t\t\t\r\n\t\t\t\t// console.log(viewModel.getProperty(\"/tree\" + supplement.path + \"/\" + newFactory.replace(/\\s/g, '') + \"/active\"));\r\n\t\t\t\t// checken ob der change zu /i/ auch auf die /factoryname im material wirkt\r\n\t\t\t\t// getflat funktioniert nicht richtig, wenn alle steel auf von 1 auf 2 gestellt werden wird \r\n\t\t\t\t// steel1 trotzdem gelistet was nicht sein kann denn alle wurden umgestellt\r\n\t\t\t} else {\r\n\t\t\t\tfor (const factory of supplement.factoryOptions) {\r\n\t\t\t\t\tfor (const material of factory.requiredProducts) {\r\n\t\t\t\t\t\tsetFactory(material);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (const supplement of supplements) {\r\n\t\t\tsetFactory(viewModel.getProperty(\"/tree/\"+ supplement.replace(/\\s/g, '')));\r\n\t\t}\r\n\t\t// Liste an Aktiven anpassen\r\n\t\tvar requiredFactories: string[] = [];\r\n\t\tvar getFlat = function(material: treeGood) {\r\n\t\t\ttry {\r\n\t\t\t\tvar factory = material.getActiveFactory();\r\n\t\t\t\trequiredFactories.indexOf(factory.Name) === -1 ? requiredFactories.push(factory.Name) : null;\r\n\t\t\t\tfor(const supliment of factory.requiredProducts) {\r\n\t\t\t\t\tgetFlat(supliment);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.warn(\"No factory\");\r\n\t\t\t\t// console.warn(error)\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (const supplement of supplements) {\r\n\t\t\tgetFlat(viewModel.getProperty(\"/tree/\"+ supplement.replace(/\\s/g, '')));\r\n\t\t}\r\n\t\tviewModel.setProperty(\"/requiredFactories\", requiredFactories.sort());\r\n\t}\r\n\tpublic onDropHave(event: Event) {\r\n\t\tvar oDragged = event.getParameter(\"draggedControl\"),\r\n\t\t\tList = oDragged.getParent(),\r\n\t\t\tiDragPosition = List.indexOfItem(oDragged);\r\n\t\tvar viewModel = this.getModel(\"View\") as JSONModel;\r\n\t\tvar aItems = viewModel.getProperty(\"/requiredFactories\");\r\n\t\tvar resultItems = viewModel.getProperty(\"/ownedFactories\");\r\n\t\t\t\r\n\t\t// remove the item\r\n\t\tvar oItem = aItems[iDragPosition];\r\n\t\taItems.splice(iDragPosition, 1);\r\n\r\n\t\tresultItems.push(oItem);\r\n\r\n\t\tviewModel.setProperty(\"/ownedFactories\", resultItems);\r\n\t\tviewModel.setProperty(\"/requiredFactories\", aItems);\r\n\t}\r\n\tpublic onPatternMatched(event: Event): void {\r\n\t\t \r\n\t}\r\n}\r\n"],"mappings":"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"}