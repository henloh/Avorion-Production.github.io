{"version":3,"file":"ProductionLine.controller.js","names":["BaseController","_interopRequireDefault","__BaseController","formatter","__formatter","Factory","___Types","Game","Product","treeGood","constructor","good","game","parent","super","Name","Dangerous","Illegal","AvgPrice","Level","Customers","Manufacturer","this","factoryOptions","subs","getId","replace","getActiveFactory","facs","factory","active","concat","getActiveSubs","indexOf","push","getExportFactory","result","requiredProducts","product","getSubGoods","getAllGoods","setActiveFactory","length","select","control","getContent","setSelectedKey","setFactoryActive","lowest","compare","getMaterialLevelCombined","setActiveFactoryRecursiv","Material","newFactoryName","checkMaterialList","buildControl","panellevel","id","Panel","getPanelId","expanded","expandable","headerText","addStyleClass","deathZone","factories","getFactoriesForProduct","newFactory","treeFactory","error","console","warn","setExpandable","addContent","newSelect","Select","selectedItem","items","path","template","Item","text","key","templateShareable","change","that","selectFactory","newButton","Button","press","setBaseFactory","ProductionCap","Cost","Products","Materials","selectid","getProduct","allGoods","requiredProduct","goodLvl","Title","width","visible","mats","getMaterialsForFactory","mat","newMat","reqMaterial","factoryGame","goods","availableGoods","reqFactories","prodTree","products","panelCount","setTargetFactory","factoryName","targetFactory","getFactory","newGood","treeitem","clearDeathZone","destroy","getActiveFactories","baseitem","Set","index","element","undefined","splice","getExportTree","exportTree","name","setAvailableGood","ProductionLine","onInit","Model","JSONModel","setData","TargetFactory","getView","setModel","getRouter","getRoute","attachPatternMatched","onPatternMatched","inputF","byId","setFilterFunction","sTerm","oItem","getText","match","RegExp","generateProductionLine","event","view","viewModel","getModel","getProperty","TargetFactoryName","getValue","setProperty","getProductsFromFactory","addItem","sort","getSource","item","getParameters","getBindingPath","i","button","substring","lastIndexOf","getSelectedItem","addAvailableGood","oView","selectDialog","open","Fragment","load","controller","then","dialog","bind","onDialogClose","aContexts","getParameter","map","oContext","getObject","getBinding","filter","onSearch","sValue","oFilter","Filter","FilterOperator","Contains","oBinding","handleDownloadPress","data","requiredFactories","basicTree","jsonString","JSON","stringify","File","save","openUploadDialog","importDialog","closeDialog","close","handleUploadPress","file","getFileObject","reader","FileReader","readAsText","onload","parse","MessageBox","show"],"sources":["../../src/controller/ProductionLine.controller.ts"],"sourcesContent":["import MessageBox from \"sap/m/MessageBox\";\r\nimport BaseController from \"./BaseController\";\r\nimport formatter from \"../model/formatter\";\r\nimport Event from \"sap/ui/base/Event\";\r\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\r\nimport Input from \"sap/m/Input\";\r\nimport SuggestionItem from \"sap/m/SuggestionItem\";\r\nimport { Factory, Game, Product } from \"./Types\";\r\nimport VBox from \"sap/m/VBox\";\r\nimport Control from \"sap/ui/core/Control\";\r\nimport Panel from \"sap/m/Panel\";\r\nimport Select from \"sap/m/Select\";\r\nimport Item from \"sap/ui/core/Item\";\r\nimport Title from \"sap/m/Title\";\r\nimport Button from \"sap/m/Button\";\r\nimport Fragment from \"sap/ui/core/Fragment\";\r\nimport SelectDialog from \"sap/m/SelectDialog\";\r\nimport Filter from \"sap/ui/model/Filter\";\r\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\r\nimport File from \"sap/ui/core/util/File\";\r\nimport Dialog from \"sap/m/Dialog\";\r\n\r\n/**\r\n * @namespace de.henloh.prodts.controller\r\n */\r\n/*\r\n.########..########...#######..########..##.....##..######..########\r\n.##.....##.##.....##.##.....##.##.....##.##.....##.##....##....##...\r\n.##.....##.##.....##.##.....##.##.....##.##.....##.##..........##...\r\n.########..########..##.....##.##.....##.##.....##.##..........##...\r\n.##........##...##...##.....##.##.....##.##.....##.##..........##...\r\n.##........##....##..##.....##.##.....##.##.....##.##....##....##...\r\n.##........##.....##..#######..########...#######...######.....##...\r\n*/\r\nclass treeGood extends Product {\r\n\tfactoryOptions: treeFactory[]; \r\n\tid: string;\r\n\tcontrol: Control;\r\n\tparent: object;\r\n\tsubs: {[k: string]: treeFactory};\r\n\tgame: factoryGame;\r\n\tconstructor(good: Product, game: factoryGame, parent: object) {\r\n\t\tsuper(good.Name, good.Dangerous, good.Illegal, good.AvgPrice, good.Level, good.Customers, good.Manufacturer);\r\n\r\n\t\tthis.parent = parent;\r\n\t\tthis.game = game;\r\n\t\tthis.factoryOptions = [];\r\n\t\tthis.subs = {};\r\n\t}\r\n\tpublic getId():string {\r\n\t\t// Parent ist entweder game oder factory\r\n\t\t//@ts-ignore\r\n\t\tif(this.parent.getId) {\r\n\t\t\t//@ts-ignore\r\n\t\t\treturn this.parent.getId() + \"/\" + this.Name.replace(/\\s/g, '');\r\n\t\t} else {\r\n\t\t\treturn this.Name.replace(/\\s/g, '');\r\n\t\t}\r\n\t}\r\n\tpublic getActiveFactory(): string[] {\r\n\t\tvar facs:string[] = []\r\n\t\tfor (const factory of this.factoryOptions) {\r\n\t\t\tif (factory.active) {\r\n\t\t\t\tfacs = facs.concat(factory.getActiveSubs());\r\n\t\t\t\tfacs.indexOf(factory.Name) === -1 ? facs.push(factory.Name) : null;\r\n\t\t\t\treturn facs;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tpublic getExportFactory(): any { \r\n\t\tvar result:any = {};\r\n\t\tfor (const factory of this.factoryOptions) {\r\n\t\t\tif (factory.active) {\r\n\t\t\t\tresult.Name = factory.Name;\r\n\t\t\t\tresult.requiredProducts = []\r\n\t\t\t\tfor (const product of factory.requiredProducts) {\r\n\t\t\t\t\tresult.requiredProducts.push({\r\n\t\t\t\t\t\tName: product.Name,\r\n\t\t\t\t\t\tFactory: product.getExportFactory()\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\tpublic getSubGoods(): treeGood[] {\r\n\t\tvar result:treeGood[] = [];\r\n\t\tfor (const factory of this.factoryOptions) {\r\n\t\t\tresult = result.concat(factory.getAllGoods());\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\tpublic setActiveFactory(Name: string) {\r\n\t\tif(!(this.factoryOptions.length > 0)) return;\r\n\t\tfor (const factory of this.factoryOptions) {\r\n\t\t\tfactory.active = false;\r\n\t\t\tif (factory.Name == Name) {\r\n\t\t\t\tfactory.active = true;\r\n\t\t\t\tif (this.factoryOptions.length > 1) {\r\n\t\t\t\t\t// first content is select\r\n\t\t\t\t\tvar select = (this.control as Panel).getContent()[0] as Select;\r\n\t\t\t\t\tselect.setSelectedKey(factory.Name.replace(/\\s/g, ''));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// initial build select one\r\n\tprivate setFactoryActive():treeFactory {\r\n\t\tif(this.factoryOptions.length == 1) {\r\n\t\t\tthis.factoryOptions[0].active = true;\r\n\t\t\treturn this.factoryOptions[0];\r\n\t\t} else if(this.factoryOptions.length > 1) {\r\n\t\t\tvar lowest = this.factoryOptions[0];\r\n\t\t\tfor (const factory of this.factoryOptions) {\r\n\t\t\t\tvar compare = lowest.getMaterialLevelCombined();\r\n\t\t\t\tif (factory.getMaterialLevelCombined() < compare) {\r\n\t\t\t\t\tlowest = factory;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlowest.active = true;\r\n\t\t\treturn lowest;\r\n\t\t}\r\n\t}\r\n\tpublic setActiveFactoryRecursiv(Material: string, newFactoryName: string) {\r\n\t\tif(this.Name == Material) {\r\n\t\t\tthis.setActiveFactory(newFactoryName);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(this.factoryOptions.length > 0) {\r\n\t\t\tfor (const factory of this.factoryOptions) {\r\n\t\t\t\t//console.log(factory.id);\r\n\t\t\t\tfactory.checkMaterialList(Material, newFactoryName);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tpublic buildControl(panellevel: number) {\r\n\t\tthis.id = this.getId();\r\n\t\tthis.control = new Panel(this.Name.replace(/\\s/g, '') + this.game.getPanelId(), {\r\n\t\t\texpanded: false,\r\n\t\t\texpandable: true,\r\n\t\t\theaderText: `{View>/game/subs/${this.id}/Name}`\r\n\t\t});\r\n\t\tthis.control.addStyleClass(\"avlevel\" + panellevel);\r\n\t\tthis.game.deathZone.push(this.control);\r\n\r\n\t\tpanellevel++;\r\n\t\tvar factories = this.game.getFactoriesForProduct(this.Name);\r\n\t\ttry {\r\n\t\t\tfor (const factory of factories) {\r\n\t\t\t\tvar newFactory = new treeFactory(factory, this.game, this);\r\n\t\t\t\tthis.factoryOptions.push(newFactory);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.warn(\"No factory for \"+ this.Name);\r\n\t\t\t(this.control as Panel).setExpandable(false);\r\n\t\t\t(this.control as Panel).addStyleClass(\"dontShowContent\");\r\n\t\t}\r\n\t\tif (this.factoryOptions.length == 1) {\r\n\t\t\tthis.factoryOptions[0].buildControl(this.Level, panellevel);\r\n\t\t\t(this.control as Panel).addContent(this.factoryOptions[0].control);\r\n\t\t\t// used for binding /LaserHead/LaserHeadFactory/Glass/GlassManufacturer/Ore/Name\r\n\t\t\t//@ts-ignore\r\n\t\t\tthis[this.factoryOptions[0].Name.replace(/\\s/g, '')] = this.factoryOptions[0];\r\n\t\t\tthis.setFactoryActive();\r\n\t\t} else if(this.factoryOptions.length > 1) {\r\n\t\t\tvar newSelect = new Select(this.Name.replace(/\\s/g, '') + this.game.getPanelId(), {\r\n\t\t\t\tselectedItem: `View>/game/subs/${this.id}/activeChild`,\r\n\t\t\t\titems: {\r\n\t\t\t\t\tpath: `View>/game/subs/${this.id}/factoryOptions`,\r\n\t\t\t\t\ttemplate: new Item({\r\n\t\t\t\t\t\ttext: \"{View>Name}\",\r\n\t\t\t\t\t\tkey: \"{View>selectid}\"\r\n\t\t\t\t\t}),\r\n\t\t\t\t\ttemplateShareable: true\r\n\t\t\t\t},\r\n\t\t\t\tchange: this.game.that.selectFactory\r\n\t\t\t});\r\n\t\t\tthis.game.deathZone.push(newSelect);\r\n\t\t\tvar lowest = this.setFactoryActive();\r\n\t\t\tnewSelect.setSelectedKey(lowest.Name.replace(/\\s/g, ''));\r\n\r\n\t\t\tvar newButton = new Button(this.Name.replace(/\\s/g, '') + this.game.getPanelId(), {\r\n\t\t\t\ttext: `Apply to all {View>/game/subs/${this.id}/Name} facilities.`,\r\n\t\t\t\tpress: this.game.that.setBaseFactory\r\n\t\t\t}).addStyleClass(\"sapUiSmallMarginBegin\");\r\n\t\t\tthis.game.deathZone.push(newButton);\r\n\r\n\t\t\t(this.control as Panel).addContent(newSelect);\r\n\t\t\t(this.control as Panel).addContent(newButton);\r\n\t\t\t\r\n\t\t\tfor (var factory of this.factoryOptions) {\r\n\t\t\t\tfactory.buildControl(this.Level, panellevel);\r\n\t\t\t\t// used for binding /LaserHead/LaserHeadFactory/Glass/GlassManufacturer/Ore/Name\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tthis[factory.Name.replace(/\\s/g, '')] = factory;\r\n\t\t\t\t(this.control as Panel).addContent(factory.control);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n/*\r\n.########....###.....######..########..#######..########..##....##\r\n.##.........##.##...##....##....##....##.....##.##.....##..##..##.\r\n.##........##...##..##..........##....##.....##.##.....##...####..\r\n.######...##.....##.##..........##....##.....##.########.....##...\r\n.##.......#########.##..........##....##.....##.##...##......##...\r\n.##.......##.....##.##....##....##....##.....##.##....##.....##...\r\n.##.......##.....##..######.....##.....#######..##.....##....##...\r\n*/\r\nclass treeFactory extends Factory {\r\n\trequiredProducts: treeGood[];\r\n\tid: string;\r\n\tselectid: string;\r\n\tcontrol: Control;\r\n\tactive: boolean;\r\n\tparent: treeGood;\r\n\tsubs: {[k: string]: treeGood};\r\n\tgame: factoryGame;\r\n\tconstructor(factory: Factory, game: factoryGame, parent: treeGood) {\r\n\t\tsuper(factory.Name,factory.ProductionCap,factory.Cost,factory.Products,factory.Materials);\r\n\r\n\t\tthis.parent = parent;\r\n\t\tthis.game = game;\r\n\t\tthis.selectid = factory.Name.replace(/\\s/g, '');\r\n\t\tthis.requiredProducts = [];\r\n\t\tthis.active = false;\r\n\t\tthis.subs = {};\r\n\t}\r\n\tpublic getId() {\r\n\t\treturn this.parent.getId() + \"/\" + this.Name.replace(/\\s/g, '');\r\n\t}\r\n\tpublic getMaterialLevelCombined(): number {\r\n\t\tvar result: number = 0;\r\n\t\tfor (const product of this.Materials) {\r\n\t\t\tresult += this.game.getProduct(product).Level;\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n\tpublic getAllGoods(): treeGood[] {\r\n\t\tvar allGoods:treeGood[] = [];\r\n\t\tfor (const good of this.requiredProducts) {\r\n\t\t\tallGoods.push(good);\r\n\t\t\tallGoods = allGoods.concat(good.getSubGoods())\r\n\t\t}\r\n\t\treturn allGoods;\r\n\t}\r\n\tpublic getActiveSubs(): string[] {\r\n\t\tvar facs:string[] = [];\r\n\t\tfor (const requiredProduct of this.requiredProducts) {\r\n\t\t\tfacs = facs.concat(requiredProduct.getActiveFactory());\r\n\t\t}\r\n\t\treturn facs\r\n\t}\r\n\tpublic checkMaterialList(Material: string, newFactoryName: string) {\r\n\t\tif (this.Products.indexOf(Material) >= 0) this.active = (this.Name == newFactoryName);\r\n\t\tfor (const requiredProduct of this.requiredProducts) {\r\n\t\t\tif(requiredProduct.Name == Material) {\r\n\t\t\t\trequiredProduct.setActiveFactory(newFactoryName);\r\n\t\t\t}\r\n\t\t\trequiredProduct.setActiveFactoryRecursiv(Material, newFactoryName);\r\n\t\t}\r\n\t}\r\n\tpublic buildControl(goodLvl: number, panellevel: number) {\r\n\t\tthis.id = this.getId();\r\n\t\tif (goodLvl == 0) {\r\n\t\t\tthis.control = new Title(this.Name.replace(/\\s/g, '') + this.game.getPanelId(), {\r\n\t\t\t\twidth: \"100%\",\r\n\t\t\t\t// bool from binding\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tvisible: `{View>/game/subs/${this.id}/active}`,\r\n\t\t\t\ttext: `{View>/game/subs/${this.id}/Name}`\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.control = new Panel(this.Name.replace(/\\s/g, '') + this.game.getPanelId(), {\r\n\t\t\t\texpanded: true,\r\n\t\t\t\texpandable: true,\r\n\t\t\t\t// bool from binding\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tvisible: `{View>/game/subs/${this.id}/active}`,\r\n\t\t\t\theaderText: `{View>/game/subs/${this.id}/Name}`\r\n\t\t\t});\r\n\t\t\tvar mats = this.game.getMaterialsForFactory(this.Name);\r\n\t\t\tfor (const mat of mats) {\r\n\t\t\t\tvar newMat = new treeGood(mat, this.game, this);\r\n\t\t\t\tthis.requiredProducts.push(newMat)\r\n\t\t\t}\r\n\t\t\tfor (var reqMaterial of this.requiredProducts) {\r\n\t\t\t\treqMaterial.buildControl(panellevel);\r\n\t\t\t\t(this.control as Panel).addContent(reqMaterial.control);\r\n\t\t\t\t// used for binding /LaserHead/LaserHeadFactory/Glass/GlassManufacturer/Ore/Name\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tthis[reqMaterial.Name.replace(/\\s/g, '')] = reqMaterial;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.game.deathZone.push(this.control);\r\n\t}\r\n}\r\n/*\r\n..######......###....##.....##.########\r\n.##....##....##.##...###...###.##......\r\n.##.........##...##..####.####.##......\r\n.##...####.##.....##.##.###.##.######..\r\n.##....##..#########.##.....##.##......\r\n.##....##..##.....##.##.....##.##......\r\n..######...##.....##.##.....##.########\r\n*/\r\nclass factoryGame extends Game {\r\n\tprivate panelCount: number;\r\n\tthat: ProductionLine;\r\n\tavailableGoods: string[];\r\n\treqFactories: treeFactory[];\r\n\tprodTree: treeGood[];\r\n\tproducts: Product[];\r\n\ttargetFactory: Factory;\r\n\tdeathZone: Control[];\r\n\tsubs: {[k: string]: treeGood};\r\n\r\n\tconstructor(goods: Product[], factories: Factory[]) {\r\n\t\tsuper(goods, factories);\r\n\t\tthis.deathZone = [];\r\n\t\tthis.availableGoods = [];\r\n\t\tthis.reqFactories = [];\r\n\t\tthis.prodTree = [];\r\n\t\tthis.products = [];\r\n\t\tthis.panelCount = 0;\r\n\t\tthis.subs = {};\r\n\t}\r\n\tpublic setTargetFactory(factoryName: string): {[k: string]: treeGood} {\r\n\t\tthis.targetFactory = this.getFactory(factoryName);\r\n\t\tthis.products = this.getMaterialsForFactory(this.targetFactory.Name);\r\n\r\n\t\tfor (const good of this.products) {\r\n\t\t\tvar newGood = new treeGood(good, this, this);\r\n\t\t\tthis.prodTree.push(newGood);\r\n\t\t}\r\n\r\n\t\t// to get a Binding /tree/id/attribut \r\n\t\t// the array need to be changed ot objects \r\n\t\tfor (var treeitem of this.prodTree) {\r\n\t\t\ttreeitem.buildControl(0);\r\n\t\t\tthis.subs[treeitem.id] = treeitem;\r\n\t\t}\r\n\r\n\t\treturn this.subs;\r\n\t}\r\n\tpublic clearDeathZone(): void {\r\n\t\tfor (const control of this.deathZone) {\r\n\t\t\tcontrol.destroy();\r\n\t\t}\r\n\t}\r\n\tpublic getActiveFactories(): string[] {\r\n\t\tvar facs:string[] = [];\r\n\t\tfor (var baseitem of this.prodTree) {\r\n\t\t\tfacs = facs.concat(baseitem.getActiveFactory())\r\n\t\t}\r\n\t\t// only Uniques\r\n\t\tfacs = [...new Set(facs)]\r\n\t\tfor (let index = facs.length - 1; index > -1; index--) {\r\n\t\t\tconst element = facs[index];\r\n\t\t\tif (element == undefined) facs.splice(index, 1);\r\n\t\t}\r\n\t\treturn facs;\r\n\t}\r\n\tpublic getExportTree(): any {\r\n\t\tvar exportTree = {};\r\n\t\tfor (var baseitem of this.prodTree) {\r\n\t\t\t//@ts-ignore\r\n\t\t\texportTree[baseitem.Name] = {\r\n\t\t\t\tName: baseitem.Name,\r\n\t\t\t\tFactory: baseitem.getExportFactory()\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn exportTree;\r\n\t}\r\n\tpublic setBaseFactory(Material:string, newFactoryName:string) {\r\n\t\tfor (var name in this.subs) {\r\n\t\t\tthis.subs[name].setActiveFactoryRecursiv(Material, newFactoryName);\r\n\t\t}\r\n\t}\r\n\tpublic setAvailableGood(Name: string) {\r\n\t\tthis.availableGoods.push(Name);\r\n\t\tvar allGoods:treeGood[] = [];\r\n\t\tfor (const good of this.prodTree) {\r\n\t\t\tallGoods.push(good);\r\n\t\t\tallGoods = allGoods.concat(good.getSubGoods());\r\n\t\t}\r\n\t\t//console.log(allGoods);\r\n\t\tfor (const good of allGoods) {\r\n\t\t\tif (good.Name == Name) {\r\n\t\t\t\tgood.control.addStyleClass(\"dontShowContent\");\r\n\t\t\t\t(good.control as Panel).setExpandable(false);\r\n\t\t\t\tfor (const factory of good.factoryOptions) {\r\n\t\t\t\t\tfactory.active = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\tpublic getPanelId():number {\r\n\t\tthis.panelCount++;\r\n\t\treturn this.panelCount\r\n\t}\r\n}\r\n/*\r\n..######...#######..##....##.########.########...#######..##.......##.......########.########.\r\n.##....##.##.....##.###...##....##....##.....##.##.....##.##.......##.......##.......##.....##\r\n.##.......##.....##.####..##....##....##.....##.##.....##.##.......##.......##.......##.....##\r\n.##.......##.....##.##.##.##....##....########..##.....##.##.......##.......######...########.\r\n.##.......##.....##.##..####....##....##...##...##.....##.##.......##.......##.......##...##..\r\n.##....##.##.....##.##...###....##....##....##..##.....##.##.......##.......##.......##....##.\r\n..######...#######..##....##....##....##.....##..#######..########.########.########.##.....##\r\n*/\r\nexport default class ProductionLine extends BaseController {\r\n\tprivate formatter = formatter;\r\n\tprivate selectDialog: SelectDialog;\r\n\tprivate importDialog: Dialog;\r\n\tpublic onInit(): void {\r\n\t\tvar Model = new JSONModel();\r\n\t\tModel.setData({\r\n\t\t\tTargetFactory: \"\",\r\n\t\t\tproducts: [],\r\n\t\t\t//mainFactory: {},\r\n\t\t\t//deathZone: [],\r\n\t\t\t//tree: [],\r\n\t\t\t//ownedFactories: [],\r\n\t\t\t//requiredFactories: []\r\n\t\t});\r\n\t\tthis.getView().setModel(Model, \"View\");\r\n\t\tthis.getRouter().getRoute(\"productionLine\").attachPatternMatched(this.onPatternMatched, this);\r\n\r\n\t\tvar inputF = this.byId(\"targetFactoryInput\") as Input;\r\n\t\t//@ts-ignore\r\n\t\tinputF.setFilterFunction(function(sTerm: string, oItem: SuggestionItem) {\r\n\t\t\treturn oItem.getText().match(new RegExp(\"^\"+sTerm, \"i\"));\r\n\t\t});\r\n\t}\r\n\t/*\r\n\t.########..########...#######..########..........##.......####.##....##.########\r\n\t.##.....##.##.....##.##.....##.##.....##.........##........##..###...##.##......\r\n\t.##.....##.##.....##.##.....##.##.....##.........##........##..####..##.##......\r\n\t.########..########..##.....##.##.....##.#######.##........##..##.##.##.######..\r\n\t.##........##...##...##.....##.##.....##.........##........##..##..####.##......\r\n\t.##........##....##..##.....##.##.....##.........##........##..##...###.##......\r\n\t.##........##.....##..#######..########..........########.####.##....##.########\r\n\t*/\r\n\tpublic async generateProductionLine(event: Event): Promise<void> {\r\n\t\tvar that = this;\r\n\t\tvar view = this.getView();\r\n\t\tvar viewModel = this.getModel(\"View\") as JSONModel;\r\n\t\tvar game:factoryGame;\r\n\t\ttry {\r\n\t\t\tgame = viewModel.getProperty(\"/game\");\r\n\t\t\tif (game) {\r\n\t\t\t\tgame.clearDeathZone();\r\n\t\t\t}\r\n\t\t\t// Clear\r\n\t\t\tgame = new factoryGame(this.getModel(\"GoodModel\").getProperty(\"/Goods\"), this.getModel(\"FactorieModel\").getProperty(\"/Factories\"));\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t\tgame.that = that;\r\n\r\n\t\tvar TargetFactoryName = (view.byId(\"targetFactoryInput\") as Input).getValue();\r\n\t\tviewModel.setProperty(\"/products\", game.getProductsFromFactory(TargetFactoryName));\r\n\t\tgame.setTargetFactory(TargetFactoryName);\r\n\t\tfor (var name in game.subs) {\r\n\t\t\t(that.byId(\"DetailedProdList\") as VBox).addItem(game.subs[name].control);\r\n\t\t\t\r\n\t\t}\r\n\t\t//console.log(xtree);\r\n\t\t\r\n\t\tviewModel.setProperty(\"/game\", game);\r\n\t\tviewModel.setProperty(\"/requiredFactories\", game.getActiveFactories().sort());\r\n\t}\r\n\t/*\r\n\t..######..##.....##....###....##....##..######...########\r\n\t.##....##.##.....##...##.##...###...##.##....##..##......\r\n\t.##.......##.....##..##...##..####..##.##........##......\r\n\t.##.......#########.##.....##.##.##.##.##...####.######..\r\n\t.##.......##.....##.#########.##..####.##....##..##......\r\n\t.##....##.##.....##.##.....##.##...###.##....##..##......\r\n\t..######..##.....##.##.....##.##....##..######...########\r\n\t*/\r\n\tpublic selectFactory(event: Event): void {\r\n\t\tvar select = event.getSource() as Select;\r\n\t\t// getParameters() returns a undefined Object\r\n\t\t//@ts-ignore\r\n\t\tvar item = event.getParameters().selectedItem as Item;\r\n\t\tvar viewModel = this.getModel(\"View\") as JSONModel;\r\n\t\tvar path = select.getBindingPath(\"items\"); // > game/subs/[Material]/.../factoryOptions\r\n\t\tvar factoryOptions = viewModel.getProperty(path);\r\n\t\tfor (var i = 0; i < factoryOptions.length; i++) {\r\n\t\t\tviewModel.setProperty(path+`/${i}/active`, false);\r\n\r\n\t\t\tif (viewModel.getProperty(path+`/${i}/Name`) == item.getText()) {\r\n\t\t\t\tviewModel.setProperty(path+`/${i}/active`, true);\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar game = viewModel.getProperty(\"/game\");\r\n\t\tviewModel.setProperty(\"/requiredFactories\", game.getActiveFactories().sort());\r\n\t}\r\n\t/*\r\n\t..######..##.....##....###....##....##..######...########............###....##.......##......\r\n\t.##....##.##.....##...##.##...###...##.##....##..##.................##.##...##.......##......\r\n\t.##.......##.....##..##...##..####..##.##........##................##...##..##.......##......\r\n\t.##.......#########.##.....##.##.##.##.##...####.######...#######.##.....##.##.......##......\r\n\t.##.......##.....##.#########.##..####.##....##..##...............#########.##.......##......\r\n\t.##....##.##.....##.##.....##.##...###.##....##..##...............##.....##.##.......##......\r\n\t..######..##.....##.##.....##.##....##..######...########.........##.....##.########.########\r\n\t*/\r\n\tpublic setBaseFactory(event: Event): void {\r\n\t\tvar viewModel = this.getModel(\"View\") as JSONModel;\t\t\r\n\t\tvar game = viewModel.getProperty(\"/game\") as factoryGame;\r\n\t\tvar button = event.getSource() as Button;\r\n\t\tvar path = button.getBindingPath(\"text\");\r\n\r\n\t\tvar Material = viewModel.getProperty(path);\r\n\t\tvar newFactory = viewModel.getProperty(path.substring(0, path.lastIndexOf(\"/\")));\r\n\t\t// first control is the select\r\n\t\tnewFactory = ((newFactory.control.getContent()[0] as Select).getSelectedItem() as Item).getText();\r\n\t\t// console.log(Material, newFactory);\r\n\t\tgame.setBaseFactory(Material, newFactory);\r\n\t\t\r\n\t\tviewModel.setProperty(\"/game\", game);\r\n\t\tviewModel.setProperty(\"/requiredFactories\", game.getActiveFactories().sort());\r\n\t}\r\n\t/*\r\n\t.########..####....###....##........#######...######..\r\n\t.##.....##..##....##.##...##.......##.....##.##....##.\r\n\t.##.....##..##...##...##..##.......##.....##.##.......\r\n\t.##.....##..##..##.....##.##.......##.....##.##...####\r\n\t.##.....##..##..#########.##.......##.....##.##....##.\r\n\t.##.....##..##..##.....##.##.......##.....##.##....##.\r\n\t.########..####.##.....##.########..#######...######..\r\n\t*/\r\n\tpublic addAvailableGood(event: Event) {\r\n\t\tvar oView = this.getView();\r\n\t\tvar that = this;\r\n\t\ttry {\r\n\t\t\t(that.selectDialog as SelectDialog).open(\"\")\r\n\t\t} catch (error) {\r\n\t\t\tFragment.load({\r\n\t\t\t\tid: \"speccalDialog\",\r\n\t\t\t\tname: \"de.henloh.prodts.view.Dialog\",\r\n\t\t\t\tcontroller: this\r\n\t\t\t}).then(function (dialog: any){\r\n\t\t\t\t(dialog as SelectDialog).setModel(oView.getModel(\"GoodModel\"));\r\n\t\t\t\t(dialog as SelectDialog).open(\"\");\r\n\t\t\t\tthat.selectDialog = dialog;\r\n\t\t\t}.bind(this));\r\n\t\t}\r\n\t}\r\n\tpublic onDialogClose(event: Event) {\r\n\t\tvar aContexts = event.getParameter(\"selectedContexts\");\r\n\t\tvar viewModel = this.getModel(\"View\") as JSONModel;\t\t\r\n\t\tvar game = viewModel.getProperty(\"/game\") as factoryGame;\r\n\t\tif (aContexts && aContexts.length) {\r\n\t\t\taContexts.map(function (oContext: any) { \r\n\t\t\t\ttry {\r\n\t\t\t\t\tgame.setAvailableGood(oContext.getObject().Name)\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.warn(error);\r\n\t\t\t\t} \r\n\t\t\t})\t\r\n\t\t\tviewModel.setProperty(\"/availableGoods\", game.availableGoods);\r\n\t\t\tviewModel.setProperty(\"/game\", game);\r\n\t\t}\r\n\t\t// Binding is not definied. Filtering is possible here\r\n\t\t//@ts-ignore \r\n\t\t(event.getSource() as SelectDialog).getBinding(\"items\").filter([]);\r\n\t\tviewModel.setProperty(\"/requiredFactories\", game.getActiveFactories().sort());\r\n\t}\r\n\tpublic onSearch(event: Event) {\r\n\t\tvar sValue = event.getParameter(\"value\");\r\n\t\tvar oFilter = new Filter(\"Name\", FilterOperator.Contains, sValue);\r\n\t\tvar oBinding = event.getParameter(\"itemsBinding\");\r\n\t\toBinding.filter([oFilter]);\r\n\t}\r\n\t/*\r\n\t.####.##.....##.########.......####.......########.##.....##.########...#######..########..########\r\n\t..##..###...###.##.....##.....##..##......##........##...##..##.....##.##.....##.##.....##....##...\r\n\t..##..####.####.##.....##......####.......##.........##.##...##.....##.##.....##.##.....##....##...\r\n\t..##..##.###.##.########......####........######......###....########..##.....##.########.....##...\r\n\t..##..##.....##.##...........##..##.##....##.........##.##...##........##.....##.##...##......##...\r\n\t..##..##.....##.##...........##...##......##........##...##..##........##.....##.##....##.....##...\r\n\t.####.##.....##.##............####..##....########.##.....##.##.........#######..##.....##....##...\r\n\t*/\r\n\tpublic handleDownloadPress(): void {\t\r\n\t\t// Convert the JSON data to a string\r\n\t\tvar viewModel = this.getModel(\"View\") as JSONModel;\r\n\t\tvar game = viewModel.getProperty(\"/game\") as factoryGame;\r\n\t\tvar data:any = {\r\n\t\t\ttargetFactory:     viewModel.getProperty(\"/TargetFactory\"),\r\n\t\t\tavailableGoods:    viewModel.getProperty(\"/availableGoods\"),\r\n\t\t\trequiredFactories: viewModel.getProperty(\"/requiredFactories\"),\r\n\t\t\tproducts:          viewModel.getProperty(\"/products\"),\r\n\t\t\tbasicTree: \t\t   game.getExportTree()\r\n\t\t};\r\n\t\tvar jsonString = JSON.stringify(data);\r\n\t\r\n\t\t// Use the FileSaver.js library to trigger a download\r\n\t\tFile.save(jsonString, \"data\", \"json\", \"application/json\", \"utf-8\");\r\n\t}\r\n\tpublic openUploadDialog(event: Event) {\r\n\t\t//var oView = this.getView();\r\n\t\tvar that = this;\r\n\t\ttry {\r\n\t\t\t(that.importDialog as Dialog).open()\r\n\t\t} catch (error) {\r\n\t\t\tFragment.load({\r\n\t\t\t\tid: \"speccalDialog2\",\r\n\t\t\t\tname: \"de.henloh.prodts.view.Import\",\r\n\t\t\t\tcontroller: this\r\n\t\t\t}).then(function (dialog: any){\r\n\t\t\t\t//(dialog as Dialog).setModel(oView.getModel(\"GoodModel\"));\r\n\t\t\t\t(dialog as Dialog).open();\r\n\t\t\t\tthat.importDialog = dialog;\r\n\t\t\t}.bind(this));\r\n\t\t}\r\n\t}\r\n\tpublic closeDialog(event: Event): void { \r\n\t\tthis.importDialog.close()\r\n\t}\r\n\tpublic handleUploadPress(event: Event): void {\r\n\t\t// Get the selected file from the input element\r\n\t\tvar file = event.getParameters().item.getFileObject();\r\n\t\tvar that = this;\r\n\t\tvar reader = new FileReader();\r\n\t\tvar viewModel = this.getModel(\"View\") as JSONModel;\r\n\r\n\t\t// Read the file as text\r\n\t\treader.readAsText(file);\r\n\r\n\t\t// When the file has been read, convert it to a JavaScript object\r\n\t\treader.onload = function() {\r\n\t\t\tvar data = JSON.parse(reader.result as string);\r\n\t\t\t//console.log(data);\r\n\t\t\ttry {\r\n\t\t\t\tviewModel.setProperty(\"/TargetFactory\", data.targetFactory);\r\n\t\t\t\tviewModel.setProperty(\"/availableGoods\", data.availableGoods);\r\n\t\t\t\tviewModel.setProperty(\"/requiredFactories\", data.requiredFactories);\r\n\t\t\t\tviewModel.setProperty(\"/products\", data.products);\r\n\r\n\t\t\t\tvar basicTree: any = data.basicTree;\r\n\r\n\t\t\t\tvar game:factoryGame;\r\n\t\t\t\tgame = viewModel.getProperty(\"/game\");\r\n\t\t\t\tif (game) {\r\n\t\t\t\t\tgame.clearDeathZone();\r\n\t\t\t\t}\r\n\t\t\t\t// Clear\r\n\t\t\t\tgame = new factoryGame(that.getModel(\"GoodModel\").getProperty(\"/Goods\"), that.getModel(\"FactorieModel\").getProperty(\"/Factories\"));\r\n\r\n\t\t\t\tgame.that = that;\r\n\t\t\t\tgame.setTargetFactory(data.targetFactory);\r\n\r\n\t\t\t\tfor (var name in game.subs) {\r\n\t\t\t\t\t(that.byId(\"DetailedProdList\") as VBox).addItem(game.subs[name].control);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tviewModel.setProperty(\"/game\", game);\r\n\r\n\t\t\t} catch (error) {\r\n\t\t\t\tMessageBox.show(\"Uploaded data does not contain a production-tree.\")\r\n\t\t\t}\r\n\t\t\t// Do something with the JavaScript object\r\n\t\t}\r\n\t}\r\n\tpublic onPatternMatched(event: Event): void {\r\n\t\t \r\n\t}\r\n}\r\n"],"mappings":"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"}