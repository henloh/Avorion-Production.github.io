{"version":3,"file":"Permutation.controller.js","names":["BaseController","_interopRequireDefault","__BaseController","formatter","__formatter","Permutation","extend","constructor","prototype","apply","this","arguments","onInit","_onInit","Model","JSONModel","document","title","setData","text","getView","setModel","getRouter","getRoute","attachPatternMatched","onPatternMatched","_onPatternMatched","event","zooExample","_zooExample","model","getModel","setProperty","generateCSV","doorExample","_doorExample","clearData","_clearData","downloadCSV","_downloadCSV","csvContent","getProperty","hiddenElement","createElement","href","encodeURI","target","download","click","_generateCSV","data","Final","Obj","JSON","parse","column","columns","dataKeys","Object","keys","rowCount","entry","length","permutatedData","addPart","permutations","options","result","index","permutation","partIndex","resultpart","remainingOptions","stringify","optionData","dataOptionsIndex","permutationOption","optionName","name","columnFillerIndex","columnFillerPartIndex","parts","columnPart","field","hasVoids","row","checkPermutation","checkPermutationText","push","basepermutations","baseoptions","element","fieldname","rows","error","console"],"sources":["../../src/controller/Permutation.controller.ts"],"sourcesContent":["import BaseController from \"./BaseController\";\r\nimport formatter from \"../model/formatter\";\r\nimport Event from \"sap/ui/base/Event\";\r\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\r\nimport Page from \"sap/m/Page\";\r\n\r\n/**\r\n * @namespace de.henloh.prodts.controller\r\n */\r\nexport default class Permutation extends BaseController {\r\n\tprivate formatter = formatter;\r\n\r\n\tpublic onInit(): void {\r\n\t\tvar Model = new JSONModel();\r\n\t\tdocument.title = \"Permutation\";\r\n\t\tModel.setData({text: \"\"});\r\n\t\tthis.getView().setModel(Model, \"View\");\r\n\t\tthis.getRouter().getRoute(\"main\").attachPatternMatched(this.onPatternMatched, this);\r\n\t}\r\n\tpublic onPatternMatched(event: Event): void {\r\n\r\n\t}\r\n\tpublic zooExample(event: Event): void {\r\n\t\tvar model = this.getView().getModel(\"View\") as JSONModel;\r\n\t\tmodel.setProperty(\"/text\", \r\n`{\r\n\t\"columns\": [{\r\n\t\t\"title\": \"Animal\",\r\n\t\t\"parts\": [[\"animals\", \"animal\"],[\"colors\", \"color\"],[\"foods\", \"food\"]]\r\n\t},{\r\n\t\t\"title\": \"Home\",\r\n\t\t\"parts\": [[\"continent\"]]\r\n\t},{\r\n\t\t\"title\": \"Weight and Height\",\r\n\t\t\"parts\": [[\"animals\", \"weight\"],[\"space\"],[\"animals\", \"height\"]]\r\n\t}],\r\n\t\"data\": {\r\n\t\t\"animals\": [\r\n\t\t\t{\"animal\": \"Zebras are \",\r\n\t\t\t\t\"weight\": \"800kg\",\r\n\t\t\t\t\"height\": \"200cm\"},\r\n\t\t\t{\"animal\": \"Lions are \",\r\n\t\t\t\t\"weight\": \"400kg\",\r\n\t\t\t\t\"height\": \"100cm\"}\r\n\t\t],\r\n\t\t\"colors\": [\r\n\t\t\t{\"color\": \"black and white\"},\r\n\t\t\t{\"color\": \"purple\"},\r\n\t\t\t{\"color\": \"green\"}\r\n\t\t],\r\n\t\t\"foods\": [\r\n\t\t\t{\"food\": \" and likes to eat grass.\"},\r\n\t\t\t{\"food\": \" and likes to eat lions.\"},\r\n\t\t\t{\"food\": \" and likes to eat girafes.\"}\r\n\t\t],\r\n\t\t\"continent\": [\"Africa\"],\r\n\t\t\"space\": [\" \"]\r\n\t}\r\n}`\r\n\t\t\t);\r\n\t\tthis.generateCSV(event);\r\n\t}\r\n\tpublic doorExample(event: Event): void {\r\n\t\tvar model = this.getView().getModel(\"View\") as JSONModel;\r\n\t\tmodel.setProperty(\"/text\", \r\n`{\r\n\t\"columns\": [{\r\n\t\t\"title\": \"Year of Production\",\r\n\t\t\"parts\": [[\"yop\"]]\r\n\t},{\r\n\t\t\"title\": \"Part number\",\r\n\t\t\"parts\": [[\"handles\", \"partno\"], [\"frames\", \"partno\"], [\"minus\"], [\"doors\", \"partno\"]]\r\n\t},{\r\n\t\t\"title\": \"Handle\",\r\n\t\t\"parts\": [[\"handles\", \"Name\"]]\r\n\t},{\r\n\t\t\"title\": \"Frame\",\r\n\t\t\"parts\": [[\"frames\", \"Name\"]]\r\n\t},{\r\n\t\t\"title\": \"Door\",\r\n\t\t\"parts\": [[\"doors\", \"Name\"]]\r\n\t}],\r\n\t\"data\": {\r\n\t\t\"yop\": [\"2024\"],\r\n\t\t\"minus\": [\"-\"],\r\n\t\t\"handles\": [\r\n\t\t\t{\"partno\": \"700\",\r\n\t\t\t \"Name\": \"Silver\"},\r\n\t\t\t{\"partno\": \"800\",\r\n\t\t\t \"Name\": \"Gold\"},\r\n\t\t\t{\"partno\": \"801\",\r\n\t\t\t \"Name\": \"Rosegold\"},\r\n\t\t\t{\"partno\": \"900\",\r\n\t\t\t \"Name\": \"Stainless\"},\r\n\t\t\t{\"partno\": \"300\",\r\n\t\t\t \"Name\": \"Brass\"},\r\n\t\t\t{\"partno\": \"600\",\r\n\t\t\t \"Name\": \"No handle\"},\r\n\t\t\t{\"partno\": \"601\",\r\n\t\t\t \"Name\": \"No lock\"}\r\n\t\t],\r\n\t\t\"frames\": [\r\n\t\t\t{\"partno\": \"010\",\r\n\t\t\t \"Name\": \"Ash\"},\r\n\t\t\t{\"partno\": \"020\",\r\n\t\t\t \"Name\": \"Birch\"},\r\n\t\t\t{\"partno\": \"030\",\r\n\t\t\t \"Name\": \"Cherry\"},\r\n\t\t\t{\"partno\": \"040\",\r\n\t\t\t \"Name\": \"Oak\"},\r\n\t\t\t{\"partno\": \"050\",\r\n\t\t\t \"Name\": \"Spruce\"},\r\n\t\t\t{\"partno\": \"060\",\r\n\t\t\t \"Name\": \"Stainless\"},\r\n\t\t\t{\"partno\": \"001\",\r\n\t\t\t \"Name\": \"No frame\"}\r\n\t\t],\r\n\t\t\"doors\": [\r\n\t\t\t{\"partno\": \"888\",\r\n\t\t\t \"Name\": \"Ash\"},\r\n\t\t\t{\"partno\": \"999\",\r\n\t\t\t \"Name\": \"Oak\"},\r\n\t\t\t{\"partno\": \"777\",\r\n\t\t\t \"Name\": \"Birch\"},\r\n\t\t\t{\"partno\": \"444\",\r\n\t\t\t \"Name\": \"Spruce\"},\r\n\t\t\t{\"partno\": \"001\",\r\n\t\t\t \"Name\": \"No door\"}\r\n\t\t]\r\n\t}\r\n}`\r\n\t\t\t);\r\n\t\tthis.generateCSV(event);\r\n\t}\r\n\tpublic clearData(event: Event): void {\r\n\t\tvar model = this.getView().getModel(\"View\") as JSONModel;\r\n\t\tmodel.setProperty(\"/Final\", \" \")\r\n\t\tmodel.setProperty(\"/text\", \" \");\r\n\t}\r\n\tpublic downloadCSV(event: Event): void {\r\n\t\tvar model = this.getView().getModel(\"View\") as JSONModel;\r\n\t\tvar csvContent = model.getProperty(\"/Final\");\r\n\t\t\r\n\t\tvar hiddenElement = document.createElement('a');  \r\n\t\thiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csvContent);  \r\n\t\thiddenElement.target = '_blank';  \r\n\t\t  \r\n\t\t//provide the name for the CSV file to be downloaded  \r\n\t\thiddenElement.download = 'generiert.csv';  \r\n\t\thiddenElement.click();\r\n\t}\r\n\tpublic generateCSV(event: Event): void {\r\n\t\tvar model = this.getView().getModel(\"View\") as JSONModel;\r\n\t\tvar data = model.getProperty(\"/text\");\r\n\t\ttry {\r\n\t\t\t// Head\r\n\t\t\tvar Final = \"\";\r\n\t\t\tvar Obj = JSON.parse(data);\r\n\t\t\tfor (const column of Obj.columns) {\r\n\t\t\t\tFinal += column.title + \";\";\r\n\t\t\t}\r\n\t\t\tFinal += \"\\n\";\r\n\t\t\t// Rows\r\n\t\t\tvar dataKeys: string[] = Object.keys(Obj.data);\r\n\t\t\tvar rowCount: int = 0;\r\n\t\t\tfor (const entry of dataKeys) {\r\n\t\t\t\trowCount == 0 ? rowCount = Obj.data[entry].length : rowCount *= Obj.data[entry].length;\r\n\t\t\t}\r\n\r\n\t\t\t// only permutate once\r\n\t\t\tvar permutatedData:string[] = [];\r\n\r\n\t\t\tvar addPart = function(permutations: any, options: any, result: any) {\r\n\t\t\t\tfor (let index = 0; index < permutations.length; index++) {\r\n\t\t\t\t\tvar permutation = permutations[index];\r\n\t\t\t\t\t//console.log(permutations);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let partIndex = 0; partIndex < permutation.length; partIndex++) {\r\n\t\t\t\t\t\tvar resultpart = permutation[partIndex];\r\n\t\t\t\t\t\tvar remainingOptions = JSON.parse(JSON.stringify(options));\r\n\t\t\t\t\t\t// console.log(resultpart);\r\n\t\t\t\t\t\tif (resultpart === null) {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// console.log(\"optionName\", optionName);\r\n\t\t\t\t\t\t\tvar optionData = remainingOptions[index][partIndex].data;\r\n\t\t\t\t\t\t\t// console.log(\"optionData\", optionData);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor (let dataOptionsIndex = 0; dataOptionsIndex < optionData.length; dataOptionsIndex++) {\r\n\t\t\t\t\t\t\t\tvar permutationOption = JSON.parse(JSON.stringify(permutations));\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tvar optionName = options[index][partIndex].name;\r\n\r\n\t\t\t\t\t\t\t\tfor (let columnFillerIndex = 0; columnFillerIndex < Obj.columns.length; columnFillerIndex++) { \r\n\t\t\t\t\t\t\t\t\tfor (let columnFillerPartIndex = 0; columnFillerPartIndex < Obj.columns[columnFillerIndex].parts.length; columnFillerPartIndex++) { \r\n\t\t\t\t\t\t\t\t\t\tvar columnPart =  Obj.columns[columnFillerIndex].parts[columnFillerPartIndex];\r\n\t\t\t\t\t\t\t\t\t\tvar field = Obj.columns[columnFillerIndex].parts[columnFillerPartIndex][1];\r\n\t\t\t\t\t\t\t\t\t\tif (columnPart[0] === optionName && permutationOption[columnFillerIndex][columnFillerPartIndex] === null) {\r\n\t\t\t\t\t\t\t\t\t\t\t// last level of data\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tpermutationOption[columnFillerIndex][columnFillerPartIndex] = optionData[dataOptionsIndex][field];\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// check if all filled then add to result.\r\n\t\t\t\t\t\t\t\tvar hasVoids = false;\r\n\t\t\t\t\t\t\t\tvar row = \"\";\r\n\t\t\t\t\t\t\t\tfor (const checkPermutation of permutationOption) {\r\n\t\t\t\t\t\t\t\t\tfor (const checkPermutationText of checkPermutation) {\r\n\t\t\t\t\t\t\t\t\t\tif (checkPermutationText === null) {\r\n\t\t\t\t\t\t\t\t\t\t\thasVoids = true;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\trow += checkPermutationText;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(hasVoids) break;\r\n\t\t\t\t\t\t\t\t\trow += \";\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\trow += \"\\n\";\r\n\t\t\t\t\t\t\t\tif (!hasVoids) {\r\n\t\t\t\t\t\t\t\t\tresult.push( row );\r\n\t\t\t\t\t\t\t\t\tpermutatedData.push(optionName);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// remove done perms and call again\r\n\t\t\t\t\t\t\t\tif (dataOptionsIndex === optionData.length -1) {\r\n\t\t\t\t\t\t\t\t\t//remainingOptions[index][partIndex] = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//console.log(JSON.stringify(remainingOptions));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\taddPart(permutationOption, remainingOptions, result)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar basepermutations = [];\r\n\t\t\tvar baseoptions = [];\r\n\t\t\tfor (let index = 0; index < Obj.columns.length; index++) {\r\n\r\n\t\t\t\tbasepermutations.push([]);\r\n\t\t\t\tbaseoptions.push([]);\r\n\r\n\t\t\t\tfor (let partIndex = 0; partIndex < Obj.columns[index].parts.length; partIndex++) {\r\n\t\t\t\t\tconst element = Obj.columns[index].parts[partIndex];\r\n\t\t\t\t\t// element.length = how deep\r\n\t\t\t\t\t// console.log(element);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (element.length === 1) {\r\n\t\t\t\t\t\t// no baseoptions -> direct filling\r\n\t\t\t\t\t\tbasepermutations[index].push(Obj.data[Obj.columns[index].parts[partIndex][0]][0]);\r\n\t\t\t\t\t\tbaseoptions[index].push(null);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//console.log(\"option added\", element, dataKeys[Obj.columns[index].parts[partIndex][0]]);\r\n\t\t\t\t\t\tvar fieldname = Obj.columns[index].parts[partIndex][0];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbasepermutations[index].push(null);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbaseoptions[index].push({\r\n\t\t\t\t\t\t\tname: fieldname,\r\n\t\t\t\t\t\t\tdata: Obj.data[fieldname]\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// console.log(JSON.stringify(baseoptions));\r\n\t\t\t\r\n\t\t\t// console.log(basepermutations, baseoptions);\r\n\t\t\t// basepermutations: [ [\"string\"], [null],   [\"string\"] ]\r\n\t\t\t//      baseoptions: [ [null],     [object], [null] ]\r\n\t\t\tvar rows = addPart(basepermutations, baseoptions, []);\r\n\t\t\tfor (const row of rows) {\r\n\t\t\t\tFinal += row;\r\n\t\t\t}\r\n\r\n\t\t\tmodel.setProperty(\"/rowCount\", rowCount);\r\n\t\t\t\r\n\t\t\tmodel.setProperty(\"/Final\", Final);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":"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"}