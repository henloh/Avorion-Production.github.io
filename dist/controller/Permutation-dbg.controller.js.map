{"version":3,"file":"Permutation-dbg.controller.js","names":["BaseController","_interopRequireDefault","__BaseController","formatter","__formatter","Permutation","extend","constructor","prototype","apply","arguments","onInit","_onInit","Model","JSONModel","document","title","setData","text","getView","setModel","getRouter","getRoute","attachPatternMatched","onPatternMatched","_onPatternMatched","event","zooExample","_zooExample","model","getModel","setProperty","generateCSV","doorExample","_doorExample","clearData","_clearData","downloadCSV","_downloadCSV","csvContent","getProperty","hiddenElement","createElement","href","encodeURI","target","download","click","_generateCSV","data","Final","Obj","JSON","parse","column","columns","dataKeys","Object","keys","rowCount","entry","length","permutatedData","addPart","permutations","options","result","index","permutation","partIndex","resultpart","remainingOptions","stringify","optionData","dataOptionsIndex","permutationOption","optionName","name","columnFillerIndex","columnFillerPartIndex","parts","columnPart","field","hasVoids","row","checkPermutation","checkPermutationText","push","basepermutations","baseoptions","element","fieldname","rows","error","console"],"sources":["../../src/controller/Permutation.controller.ts"],"sourcesContent":["import BaseController from \"./BaseController\";\r\nimport formatter from \"../model/formatter\";\r\nimport Event from \"sap/ui/base/Event\";\r\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\r\nimport Page from \"sap/m/Page\";\r\n\r\n/**\r\n * @namespace de.henloh.prodts.controller\r\n */\r\nexport default class Permutation extends BaseController {\r\n\tprivate formatter = formatter;\r\n\r\n\tpublic onInit(): void {\r\n\t\tvar Model = new JSONModel();\r\n\t\tdocument.title = \"Permutation\";\r\n\t\tModel.setData({text: \"\"});\r\n\t\tthis.getView().setModel(Model, \"View\");\r\n\t\tthis.getRouter().getRoute(\"main\").attachPatternMatched(this.onPatternMatched, this);\r\n\t}\r\n\tpublic onPatternMatched(event: Event): void {\r\n\r\n\t}\r\n\tpublic zooExample(event: Event): void {\r\n\t\tvar model = this.getView().getModel(\"View\") as JSONModel;\r\n\t\tmodel.setProperty(\"/text\", \r\n`{\r\n\t\"columns\": [{\r\n\t\t\"title\": \"Animal\",\r\n\t\t\"parts\": [[\"animals\", \"animal\"],[\"colors\", \"color\"],[\"foods\", \"food\"]]\r\n\t},{\r\n\t\t\"title\": \"Home\",\r\n\t\t\"parts\": [[\"continent\"]]\r\n\t},{\r\n\t\t\"title\": \"Weight and Height\",\r\n\t\t\"parts\": [[\"animals\", \"weight\"],[\"space\"],[\"animals\", \"height\"]]\r\n\t}],\r\n\t\"data\": {\r\n\t\t\"animals\": [\r\n\t\t\t{\"animal\": \"Zebras are \",\r\n\t\t\t\t\"weight\": \"800kg\",\r\n\t\t\t\t\"height\": \"200cm\"},\r\n\t\t\t{\"animal\": \"Lions are \",\r\n\t\t\t\t\"weight\": \"400kg\",\r\n\t\t\t\t\"height\": \"100cm\"}\r\n\t\t],\r\n\t\t\"colors\": [\r\n\t\t\t{\"color\": \"black and white\"},\r\n\t\t\t{\"color\": \"purple\"},\r\n\t\t\t{\"color\": \"green\"}\r\n\t\t],\r\n\t\t\"foods\": [\r\n\t\t\t{\"food\": \" and likes to eat grass.\"},\r\n\t\t\t{\"food\": \" and likes to eat lions.\"},\r\n\t\t\t{\"food\": \" and likes to eat girafes.\"}\r\n\t\t],\r\n\t\t\"continent\": [\"Africa\"],\r\n\t\t\"space\": [\" \"]\r\n\t}\r\n}`\r\n\t\t\t);\r\n\t\tthis.generateCSV(event);\r\n\t}\r\n\tpublic doorExample(event: Event): void {\r\n\t\tvar model = this.getView().getModel(\"View\") as JSONModel;\r\n\t\tmodel.setProperty(\"/text\", \r\n`{\r\n\t\"columns\": [{\r\n\t\t\"title\": \"Year of Production\",\r\n\t\t\"parts\": [[\"yop\"]]\r\n\t},{\r\n\t\t\"title\": \"Part number\",\r\n\t\t\"parts\": [[\"handles\", \"partno\"], [\"frames\", \"partno\"], [\"minus\"], [\"doors\", \"partno\"]]\r\n\t},{\r\n\t\t\"title\": \"Handle\",\r\n\t\t\"parts\": [[\"handles\", \"Name\"]]\r\n\t},{\r\n\t\t\"title\": \"Frame\",\r\n\t\t\"parts\": [[\"frames\", \"Name\"]]\r\n\t},{\r\n\t\t\"title\": \"Door\",\r\n\t\t\"parts\": [[\"doors\", \"Name\"]]\r\n\t}],\r\n\t\"data\": {\r\n\t\t\"yop\": [\"2024\"],\r\n\t\t\"minus\": [\"-\"],\r\n\t\t\"handles\": [\r\n\t\t\t{\"partno\": \"700\",\r\n\t\t\t \"Name\": \"Silver\"},\r\n\t\t\t{\"partno\": \"800\",\r\n\t\t\t \"Name\": \"Gold\"},\r\n\t\t\t{\"partno\": \"801\",\r\n\t\t\t \"Name\": \"Rosegold\"},\r\n\t\t\t{\"partno\": \"900\",\r\n\t\t\t \"Name\": \"Stainless\"},\r\n\t\t\t{\"partno\": \"300\",\r\n\t\t\t \"Name\": \"Brass\"},\r\n\t\t\t{\"partno\": \"600\",\r\n\t\t\t \"Name\": \"No handle\"},\r\n\t\t\t{\"partno\": \"601\",\r\n\t\t\t \"Name\": \"No lock\"}\r\n\t\t],\r\n\t\t\"frames\": [\r\n\t\t\t{\"partno\": \"010\",\r\n\t\t\t \"Name\": \"Ash\"},\r\n\t\t\t{\"partno\": \"020\",\r\n\t\t\t \"Name\": \"Birch\"},\r\n\t\t\t{\"partno\": \"030\",\r\n\t\t\t \"Name\": \"Cherry\"},\r\n\t\t\t{\"partno\": \"040\",\r\n\t\t\t \"Name\": \"Oak\"},\r\n\t\t\t{\"partno\": \"050\",\r\n\t\t\t \"Name\": \"Spruce\"},\r\n\t\t\t{\"partno\": \"060\",\r\n\t\t\t \"Name\": \"Stainless\"},\r\n\t\t\t{\"partno\": \"001\",\r\n\t\t\t \"Name\": \"No frame\"}\r\n\t\t],\r\n\t\t\"doors\": [\r\n\t\t\t{\"partno\": \"888\",\r\n\t\t\t \"Name\": \"Ash\"},\r\n\t\t\t{\"partno\": \"999\",\r\n\t\t\t \"Name\": \"Oak\"},\r\n\t\t\t{\"partno\": \"777\",\r\n\t\t\t \"Name\": \"Birch\"},\r\n\t\t\t{\"partno\": \"444\",\r\n\t\t\t \"Name\": \"Spruce\"},\r\n\t\t\t{\"partno\": \"001\",\r\n\t\t\t \"Name\": \"No door\"}\r\n\t\t]\r\n\t}\r\n}`\r\n\t\t\t);\r\n\t\tthis.generateCSV(event);\r\n\t}\r\n\tpublic clearData(event: Event): void {\r\n\t\tvar model = this.getView().getModel(\"View\") as JSONModel;\r\n\t\tmodel.setProperty(\"/Final\", \" \")\r\n\t\tmodel.setProperty(\"/text\", \" \");\r\n\t}\r\n\tpublic downloadCSV(event: Event): void {\r\n\t\tvar model = this.getView().getModel(\"View\") as JSONModel;\r\n\t\tvar csvContent = model.getProperty(\"/Final\");\r\n\t\t\r\n\t\tvar hiddenElement = document.createElement('a');  \r\n\t\thiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csvContent);  \r\n\t\thiddenElement.target = '_blank';  \r\n\t\t  \r\n\t\t//provide the name for the CSV file to be downloaded  \r\n\t\thiddenElement.download = 'generiert.csv';  \r\n\t\thiddenElement.click();\r\n\t}\r\n\tpublic generateCSV(event: Event): void {\r\n\t\tvar model = this.getView().getModel(\"View\") as JSONModel;\r\n\t\tvar data = model.getProperty(\"/text\");\r\n\t\ttry {\r\n\t\t\t// Head\r\n\t\t\tvar Final = \"\";\r\n\t\t\tvar Obj = JSON.parse(data);\r\n\t\t\tfor (const column of Obj.columns) {\r\n\t\t\t\tFinal += column.title + \";\";\r\n\t\t\t}\r\n\t\t\tFinal += \"\\n\";\r\n\t\t\t// Rows\r\n\t\t\tvar dataKeys: string[] = Object.keys(Obj.data);\r\n\t\t\tvar rowCount: int = 0;\r\n\t\t\tfor (const entry of dataKeys) {\r\n\t\t\t\trowCount == 0 ? rowCount = Obj.data[entry].length : rowCount *= Obj.data[entry].length;\r\n\t\t\t}\r\n\r\n\t\t\t// only permutate once\r\n\t\t\tvar permutatedData:string[] = [];\r\n\r\n\t\t\tvar addPart = function(permutations: any, options: any, result: any) {\r\n\t\t\t\tfor (let index = 0; index < permutations.length; index++) {\r\n\t\t\t\t\tvar permutation = permutations[index];\r\n\t\t\t\t\t//console.log(permutations);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let partIndex = 0; partIndex < permutation.length; partIndex++) {\r\n\t\t\t\t\t\tvar resultpart = permutation[partIndex];\r\n\t\t\t\t\t\tvar remainingOptions = JSON.parse(JSON.stringify(options));\r\n\t\t\t\t\t\t// console.log(resultpart);\r\n\t\t\t\t\t\tif (resultpart === null) {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// console.log(\"optionName\", optionName);\r\n\t\t\t\t\t\t\tvar optionData = remainingOptions[index][partIndex].data;\r\n\t\t\t\t\t\t\t// console.log(\"optionData\", optionData);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor (let dataOptionsIndex = 0; dataOptionsIndex < optionData.length; dataOptionsIndex++) {\r\n\t\t\t\t\t\t\t\tvar permutationOption = JSON.parse(JSON.stringify(permutations));\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tvar optionName = options[index][partIndex].name;\r\n\r\n\t\t\t\t\t\t\t\tfor (let columnFillerIndex = 0; columnFillerIndex < Obj.columns.length; columnFillerIndex++) { \r\n\t\t\t\t\t\t\t\t\tfor (let columnFillerPartIndex = 0; columnFillerPartIndex < Obj.columns[columnFillerIndex].parts.length; columnFillerPartIndex++) { \r\n\t\t\t\t\t\t\t\t\t\tvar columnPart =  Obj.columns[columnFillerIndex].parts[columnFillerPartIndex];\r\n\t\t\t\t\t\t\t\t\t\tvar field = Obj.columns[columnFillerIndex].parts[columnFillerPartIndex][1];\r\n\t\t\t\t\t\t\t\t\t\tif (columnPart[0] === optionName && permutationOption[columnFillerIndex][columnFillerPartIndex] === null) {\r\n\t\t\t\t\t\t\t\t\t\t\t// last level of data\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tpermutationOption[columnFillerIndex][columnFillerPartIndex] = optionData[dataOptionsIndex][field];\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// check if all filled then add to result.\r\n\t\t\t\t\t\t\t\tvar hasVoids = false;\r\n\t\t\t\t\t\t\t\tvar row = \"\";\r\n\t\t\t\t\t\t\t\tfor (const checkPermutation of permutationOption) {\r\n\t\t\t\t\t\t\t\t\tfor (const checkPermutationText of checkPermutation) {\r\n\t\t\t\t\t\t\t\t\t\tif (checkPermutationText === null) {\r\n\t\t\t\t\t\t\t\t\t\t\thasVoids = true;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\trow += checkPermutationText;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(hasVoids) break;\r\n\t\t\t\t\t\t\t\t\trow += \";\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\trow += \"\\n\";\r\n\t\t\t\t\t\t\t\tif (!hasVoids) {\r\n\t\t\t\t\t\t\t\t\tresult.push( row );\r\n\t\t\t\t\t\t\t\t\tpermutatedData.push(optionName);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// remove done perms and call again\r\n\t\t\t\t\t\t\t\tif (dataOptionsIndex === optionData.length -1) {\r\n\t\t\t\t\t\t\t\t\t//remainingOptions[index][partIndex] = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//console.log(JSON.stringify(remainingOptions));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\taddPart(permutationOption, remainingOptions, result)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar basepermutations = [];\r\n\t\t\tvar baseoptions = [];\r\n\t\t\tfor (let index = 0; index < Obj.columns.length; index++) {\r\n\r\n\t\t\t\tbasepermutations.push([]);\r\n\t\t\t\tbaseoptions.push([]);\r\n\r\n\t\t\t\tfor (let partIndex = 0; partIndex < Obj.columns[index].parts.length; partIndex++) {\r\n\t\t\t\t\tconst element = Obj.columns[index].parts[partIndex];\r\n\t\t\t\t\t// element.length = how deep\r\n\t\t\t\t\t// console.log(element);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (element.length === 1) {\r\n\t\t\t\t\t\t// no baseoptions -> direct filling\r\n\t\t\t\t\t\tbasepermutations[index].push(Obj.data[Obj.columns[index].parts[partIndex][0]][0]);\r\n\t\t\t\t\t\tbaseoptions[index].push(null);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//console.log(\"option added\", element, dataKeys[Obj.columns[index].parts[partIndex][0]]);\r\n\t\t\t\t\t\tvar fieldname = Obj.columns[index].parts[partIndex][0];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbasepermutations[index].push(null);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbaseoptions[index].push({\r\n\t\t\t\t\t\t\tname: fieldname,\r\n\t\t\t\t\t\t\tdata: Obj.data[fieldname]\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// console.log(JSON.stringify(baseoptions));\r\n\t\t\t\r\n\t\t\t// console.log(basepermutations, baseoptions);\r\n\t\t\t// basepermutations: [ [\"string\"], [null],   [\"string\"] ]\r\n\t\t\t//      baseoptions: [ [null],     [object], [null] ]\r\n\t\t\tvar rows = addPart(basepermutations, baseoptions, []);\r\n\t\t\tfor (const row of rows) {\r\n\t\t\t\tFinal += row;\r\n\t\t\t}\r\n\r\n\t\t\tmodel.setProperty(\"/rowCount\", rowCount);\r\n\t\t\t\r\n\t\t\tmodel.setProperty(\"/Final\", Final);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":"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"}